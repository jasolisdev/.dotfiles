# vim:fileencoding=utf-8:ft=conf:foldmethod=marker

shell_integration no-cursor

#font_family      Source Code Pro
#font_family      JetBrains Mono
font_family	  Hasklig Bold
font_size        13

adjust_line_height 0
adjust_column_width 0

box_drawing_scale 0.001, 1, 1.5, 2

cursor #cccccc
cursor_text_color #cccccc
cursor_shape     block
cursor_blink_interval 0.5
cursor_stop_blinking_after 15.0

scrollback_lines 10000
scrollback_pager less +G -R
# wheel_scroll_multiplier 5.0
wheel_scroll_multiplier 1.0
touch_scroll_multiplier 1.0

# Mouse {{{
# The color and style for highlighting URLs on mouse-over. url_style can be one of:
# none, single, double, curly
url_color #928374
url_style single

# The modifier keys to press when clicking with the mouse on URLs to open the URL
open_url_modifiers kitty_mod

# The program with which to open URLs that are clicked on. The special value "default" means to
# use the operating system's default URL handler.
open_url_with default

copy_on_select no

strip_trailing_spaces never

rectangle_select_modifiers ctrl+alt
select_by_word_characters :@-./_~?&=%+#

# The interval between successive clicks to detect double/triple clicks (in seconds)
click_interval 0.5

# Hide mouse cursor after the specified number of seconds of the mouse not being used. Set to
# zero to disable mouse cursor hiding.
mouse_hide_wait 0.0

# Set the active window to the window under the mouse when moving the mouse around
focus_follows_mouse no

# monitor with a high refresh rate.
repaint_delay    10
input_delay 3
sync_to_monitor yes

# Enable/disable the audio bell. Useful in environments that require silence.
enable_audio_bell no
visual_bell_duration 0.0
window_alert_on_bell yes
bell_on_tab no

# Window layout
remember_window_size   no
initial_window_width   750
initial_window_height  470
enabled_layouts *
window_resize_step_cells 2
window_resize_step_lines 2
window_border_width 0
window_margin_width 0
window_padding_width 0

# The color for the border of the active window
active_border_color #928374

# The color for the border of inactive windows
inactive_border_color #928374

# The color for the border of inactive windows in which a bell has occurred
bell_border_color #ff5a00

# Fade the text in inactive windows by the specified amount (a number between
# zero and one, with 0 being fully faded).
inactive_text_alpha 1.0

# Tab bar
# Which edge to show the tab bar on, top or bottom
tab_bar_edge bottom

# The margin to the left and right of the tab bar (in pts)
tab_bar_margin_width 0

# The separator between tabs in the tab bar
tab_separator " â”‡"

# Tab bar colors and styles
active_tab_foreground #000
active_tab_background #eee
active_tab_font_style bold-italic
inactive_tab_foreground #444
inactive_tab_background #999
inactive_tab_font_style normal

# Color scheme {{{
include gruvbox-dark.conf
#include tokyonight.conf

 background_opacity .85
# dynamic_background_opacity no
dim_opacity 0.8

# Advanced {{{
update_check_interval 24

# The shell program to execute. The default value of . means
# to use whatever shell is set as the default shell for the current user.
# Note that on macOS if you change this, you might need to add --login to
# ensure that the shell starts in interactive mode and reads its startup rc files.
shell .

# The console editor to use when editing the kitty config file or similar
# tasks. A value of . means to use the environment variable EDITOR. Note that
# this environment variable has to be set not just in your shell startup
# scripts but system-wide, otherwise kitty will not see it.
editor .

#
# Close the window when the child process (shell) exits. If no (the default),
# the terminal will remain open when the child exits as long as there are still
# processes outputting to the terminal (for example disowned or backgrounded
# processes). If yes, the window will close as soon as the child process exits.
# Note that setting it to yes means that any background processes still using
# the terminal can fail silently because their stdout/stderr/stdin no longer
# work.
close_on_child_death no

# Allow other programs to control kitty. If you turn this on other programs can
# control all aspects of kitty, including sending text to kitty windows,
# opening new windows, closing windows, reading the content of windows, etc.
# Note that this even works over ssh connections.
allow_remote_control yes

# Allow programs running in kitty to read and write from the clipboard. You can
# control exactly which actions are allowed. The set of possible actions is:
# write-clipboard read-clipboard write-primary read-primary
# The default is to allow writing to the clipboard and primary selection. Note
# that enabling the read functionality is a security risk as it means that any
# program, even one running on a remote server via SSH can read your clipboard.
clipboard_control write-clipboard write-primary

# The value of the TERM environment variable to set. Changing this can break
# many terminal programs, only change it if you know what you are doing, not
# because you read some advice on Stack Overflow to change it.
term xterm-kitty
# term xterm-256color

# Keyboard shortcuts {{{
# For a list of key names, see: http://www.glfw.org/docs/latest/group__keys.html
# For a list of modifier names, see: http://www.glfw.org/docs/latest/group__mods.html

# The value of kitty_mod is used as the modifier for all default shortcuts, you
# can change it in your kitty.conf to change the modifiers for all the default
# shortcuts.
kitty_mod ctrl+shift
#
# You can use the special action no_op to unmap a keyboard shortcut that is
# assigned in the default configuration.
#
# You can combine multiple actions to be triggered by a single shortcut, using the
# syntax below:
# map key combine <separator> action1 <separator> action2 <separator> action3 ...
# For example:
# map kitty_mod+e combine : new_window : next_layout
# this will create a new window and switch to the next available layout
#
# You can use multi-key shortcuts using the syntax shown below:
# map key1>key2>key3 action
# For example:
# map ctrl+f>2 set_font_size 20
# this will change the font size to 20 points when you press ctrl+f and then 2

# Clipboard {{{
map kitty_mod+c        copy_to_clipboard
map kitty_mod+v        paste_from_clipboard
map kitty_mod+s        paste_from_selection
map shift+insert       paste_from_selection
# You can also pass the contents of the current selection to any program using
# pass_selection_to_program. By default, the system's open program is used, but
# you can specify your own, for example:
# map kitty_mod+o      pass_selection_to_program firefox
map kitty_mod+o        pass_selection_to_program
# }}}

# Scrolling {{{
map kitty_mod+up        scroll_line_up
map kitty_mod+down      scroll_line_down
map kitty_mod+k         scroll_line_up
map kitty_mod+j         scroll_line_down
map kitty_mod+page_up   scroll_page_up
map kitty_mod+page_down scroll_page_down
map kitty_mod+home      scroll_home
map kitty_mod+end       scroll_end
map kitty_mod+h         show_scrollback
# }}}

# Window management {{{
map kitty_mod+enter    new_window
map kitty_mod+n        new_os_window
map kitty_mod+w        close_window
map kitty_mod+]        next_window
map kitty_mod+[        previous_window
map kitty_mod+f        move_window_forward
map kitty_mod+b        move_window_backward
map kitty_mod+`        move_window_to_top
map kitty_mod+r        start_resizing_window
# Switching to a particular window
map kitty_mod+1        first_window
map kitty_mod+2        second_window
map kitty_mod+3        third_window
map kitty_mod+4        fourth_window
map kitty_mod+5        fifth_window
map kitty_mod+6        sixth_window
map kitty_mod+7        seventh_window
map kitty_mod+8        eighth_window
map kitty_mod+9        ninth_window
map kitty_mod+0        tenth_window
# You can open a new window running an arbitrary program, for example:
# map kitty_mod+y      new_window mutt
#
# You can pass the current selection to the new program by using the @selection placeholder
# map kitty_mod+y      new_window less @selection
#
# You can even send the contents of the current screen + history buffer as stdin using
# the placeholders @text (which is the plain text) and @ansi (which includes text styling escape codes).
# For only the current screen, use @screen or @ansi_screen.
# For example, the following command opens the scrollback buffer in less in a new window.
# map kitty_mod+y      new_window @ansi less +G -R
#
# You can open a new window with the current working directory set to the
# working directory of the current window using
# map ctrl+alt+enter    new_window_with_cwd
# }}}

# Tab management {{{
map kitty_mod+right    next_tab
map kitty_mod+left     previous_tab
map kitty_mod+t        new_tab
map kitty_mod+q        close_tab
map kitty_mod+l        next_layout
map kitty_mod+.        move_tab_forward
map kitty_mod+,        move_tab_backward
map kitty_mod+alt+t    set_tab_title
# You can also create shortcuts to go to specific tabs, with 1 being the first tab
# map ctrl+alt+1          goto_tab 1
# map ctrl+alt+2          goto_tab 2

# Just as with new_window above, you can also pass the name of arbitrary
# commands to run when using new_tab and use new_tab_with_cwd.
# }}}

# Layout management {{{
# You can create shortcuts to switch to specific layouts
# map ctrl+alt+1          goto_layout tall
# map ctrl+alt+2          goto_layout stack
# }}}

# Font sizes {{{
# You can change the font size for all top-level kitty windows at a time
# or only the current one.
map kitty_mod+equal    change_font_size all +2.0
map kitty_mod+minus    change_font_size all -2.0
map kitty_mod+backspace change_font_size all 0
# To setup shortcuts for specific font sizes:
# map kitty_mod+f6     change_font_size all 10.0
# To setup shortcuts to change only the current window's font size:
# map kitty_mod+f6     change_font_size current 10.0
# }}}

# Select and act on visible text {{{
# Use the hints kitten to select text and either pass it to an external program or
# insert it into the terminal or copy it to the clipboard.
#
# Open a currently visible URL using the keyboard. The program used to open the
# URL is specified in open_url_with.
map kitty_mod+e         kitten hints

# Select a path/filename and insert it into the terminal. Useful, for instance to
# run git commands on a filename output from a previous git command.
map kitty_mod+p>f       kitten hints --type path --program -

# Select something that looks like a hash and insert it into the terminal.
# Useful with git, which uses sha1 hashes to identify commits
map kitty_mod+p>h       kitten hints --type hash --program -

# Select a path/filename and open it with the default open program.
map kitty_mod+p>shift+f kitten hints --type path

# Select a line of text and insert it into the terminal. Use for the
# output of things like: ls -1
map kitty_mod+p>l       kitten hints --type line --program -

# Select words and insert into terminal.
map kitty_mod+p>w       kitten hints --type word --program -

# The hints kitten has many more modes of operation that you can map to different
# shortcuts. For a full description run: kitty +kitten hints --help
# }}}

# Miscellaneous {{{
map kitty_mod+up        change_font_size all +1.0
map kitty_mod+down      change_font_size all -1.0
map kitty_mod+backspace restore_font_size
map kitty_mod+f11       toggle_fullscreen
map kitty_mod+f2        edit_config_file
map kitty_mod+u         input_unicode_character

# Open the kitty shell in a new window/tab/overlay/os_window to control kitty using commands.
map kitty_mod+escape    kitty_shell window

map kitty_mod+a>m       set_background_opacity +0.1
map kitty_mod+a>l       set_background_opacity -0.1
map kitty_mod+a>1       set_background_opacity 1
map kitty_mod+a>d       set_background_opacity default

# Sending arbitrary text on shortcut key presses
# You can tell kitty to send arbitrary (UTF-8) encoded text to
# the client program when pressing specified shortcut keys. For example:
# map ctrl+alt+a send_text all Special text
# This will send "Special text" when you press the Ctrl+Alt+a key combination.
# The text to be sent is a python string literal so you can use escapes like
# \x1b to send control codes or \u21fb to send unicode characters (or you can
# just input the unicode characters directly as UTF-8 text). The first argument
# to send_text is the keyboard modes in which to activate the shortcut. The possible
# values are normal or application or kitty or a comma separated combination of them.
# The special keyword all means all modes. The modes normal and application refer to
# the DECCKM cursor key mode for terminals, and kitty refers to the special kitty
# extended keyboard protocol. Another example, that outputs a word and then moves the cursor
# to the start of the line (same as pressing the Home key):
# map ctrl+alt+a send_text normal Word\x1b[H
# map ctrl+alt+a send_text application Word\x1bOH
# }}}

# You can have kitty remove all shortcut definition seen up to this point. Useful, for
# instance, to remove the default shortcuts.
clear_all_shortcuts no
# }}}

# OS specific tweaks {{{

# Change the color of the kitty window's titlebar on macOS. A value of "system"
# means to use the default system color, a value of "background" means to use
# the background color of the currently active window and finally you can use
# an arbitrary color, such as #12af59 or "red". WARNING: This option works by
# using a hack, as there is no proper Cocoa API for it. It sets the background
# color of the entire window and makes the titlebar transparent. As such it is
# incompatible with background_opacity. If you want to use both, you are
# probably better off just hiding the titlebar with macos_hide_titlebar.
macos_titlebar_color system

# Hide the kitty window's title bar on macOS.
macos_hide_titlebar no

# Use the option key as an alt key. With this set to no, kitty will use
# the macOS native Option+Key = unicode character behavior. This will
# break any Alt+key keyboard shortcuts in your terminal programs, but you
# can use the macOS unicode input technique.
macos_option_as_alt yes

# Hide the kitty window from running tasks (alt-tab) on macOS.
macos_hide_from_tasks no
# }}}

# Custom unmaps {{{
map kitty_mod+enter     no_op
map kitty_mod+n         no_op
map kitty_mod+w         no_op
map kitty_mod+]         no_op
map kitty_mod+[         no_op
map kitty_mod+f         no_op
map kitty_mod+b         no_op
map kitty_mod+`         no_op
map kitty_mod+r         no_op
map kitty_mod+1         no_op
map kitty_mod+2         no_op
map kitty_mod+3         no_op
map kitty_mod+4         no_op
map kitty_mod+5         no_op
map kitty_mod+6         no_op
map kitty_mod+7         no_op
map kitty_mod+8         no_op
map kitty_mod+9         no_op
map kitty_mod+0         no_op
map kitty_mod+right     no_op
map kitty_mod+left      no_op
map kitty_mod+t         no_op
map kitty_mod+q         no_op
map kitty_mod+l         no_op
map kitty_mod+.         no_op
map kitty_mod+,         no_op
map kitty_mod+alt+t     no_op
